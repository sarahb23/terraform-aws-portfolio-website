name: Copy website source to S3

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'web/**'
      - '.github/workflows/s3.yml'

jobs:
  deploy:
    name: Upload to Amazon S3
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set environment for branch
      run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "TF_WORKSPACE=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == 'refs/heads/development' || $GITHUB_REF == *'refs/pull'* ]]; then
              echo "TF_WORKSPACE=dev" >> $GITHUB_ENV
          fi
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        # terraform_version: 0.13.0:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7
    
    - name: Terraform Init
      id: init
      run: terraform init -input=false
    
    - name: Get S3 Bucket
      id: tfouts3
      run: terraform output website_bucket

    - name: Get CF ID
      id: tfoutcf
      run: terraform output cloudfront_id

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Copy files to the website with the AWS CLI and invalidates cache
      run: |
        pip install jinja2
        cd web/ && python build_site.py && cd ..
        BUCKET=${{ steps.tfouts3.outputs.stdout }}
        CF_ID=${{ steps.tfoutcf.outputs.stdout }}
        aws s3 sync web/public/ s3://$BUCKET --exclude '*.git*' --exclude '*README*'
        aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/"
